version: '3'
services:
  traefik:
    image: docker.io/library/traefik:v2.5
    command:
      - '--api.dashboard=true' # enables the web UI
      - '--api.insecure=true' # enables the web UI
      - '--ping=true' # enables healthcheck route
      - '--providers.docker' # tell Traefik to listen to docker
      - '--providers.docker.exposedbydefault=false' # do not expose containers unless explicitly told so
      - '--providers.docker.network=docker-compose-octoprint_traefik-net' # set traefik's network
      - '--log.level=DEBUG' # set log level
      - '--accesslog=true' # enable access logs
      - '--accessLog.filePath=/var/log/access.log' # set access log path
      # - '--accessLog.format='
      - '--providers.file.directory=/traefik/dynamic' # use dynamic config files
      - '--entryPoints.http.address=:80' # listen on 80
      - '--entryPoints.https.address=:443' # listen on 443
      - '--entryPoints.traefik.address=:8080' # listen on 8080
      # redirect http to https
      - '--entryPoints.http.http.redirections.entryPoint.to=https'
      - '--entryPoints.http.http.redirections.entryPoint.scheme=https'
      - '--serversTransport.insecureSkipVerify=true' # disable certificate verification for load balance endpoints
    # user: '${USER_ID}:${GROUP_ID}'
    ports:
      - '8008:80' # HTTP port
      - '8008:80/udp' # HTTP port
      - '4443:443' # HTTPS port
      - '4443:443/udp' # HTTPS port
      - '3000:8080' # dashboard
      - '3000:8080/udp' # dashboard
    networks:
      - traefik-net
    volumes:
      # TODO: don't pass in the socket. start here https://doc.traefik.io/traefik/providers/docker/#docker-api-access
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./files/ssl:/etc/ssl-certs:ro
      - ./files/traefik/dynamic:/traefik/dynamic
      - /var/log/traefik:/var/log
    healthcheck:
      test: 'traefik healthcheck --ping'
    restart: 'unless-stopped'

  fluidd:
    image: 'docker.io/cadriel/fluidd:latest'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.fluidd.rule: 'PathPrefix(`/`)'
      traefik.http.routers.fluidd.tls: 'true'
      traefik.http.services.fluidd.loadbalancer.server.port: '80'
    networks:
      - 'traefik-net'
    volumes:
      - '../klipper-config:/klipper-config'
      - '/var/log/klippy.log:/var/log/klippy.log'
      - '/dev:/dev'
      - '/tmp:/tmp'
    # environment:
    # JPEG_STREAM_HOST: ''
    # JPEG_STREAM_PORT: ''
    depends_on:
      - 'moonraker'
    healthcheck:
      test: 'curl --fail --silent http://localhost:80 || exit 1'
    restart: 'unless-stopped'
  mjpg-streamer:
    # image: 'ghcr.io/davralin/mjpg-streamer:latest'
    build:
      context: './files/mjpg-streamer'
      dockerfile: 'Containerfile'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.mjpg-streamer.rule: 'PathPrefix(`/webcam`)'
      traefik.http.routers.mjpg-streamer.tls: 'true'
      traefik.http.routers.mjpg-streamer.middlewares: 'mjpg-streamer@docker'
      traefik.http.services.mjpg-streamer.loadbalancer.server.port: '8080'
      traefik.http.middlewares.mjpg-streamer.replacepathregex.regex: '^/webcam/(.*)'
      traefik.http.middlewares.mjpg-streamer.replacepathregex.replacement: '/$$1'
    networks:
      - 'traefik-net'
    devices:
      - '/dev/video0'
    command: 'input_uvc.so --device /dev/video0 --fps 15 --resolution 1280x720'
    healthcheck:
      test: 'test /dev/video0 || exit 1'
    restart: 'unless-stopped'
  moonraker:
    # image: 'docker.io/mkuf/moonraker:nightly'
    build:
      context: '../moonraker'
      dockerfile: 'Dockerfile'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.moonraker.rule: 'PathPrefix(`/websocket`,`/printer`,`/api`,`/access`,`/machine`,`/server`)'
      traefik.http.routers.moonraker.tls: 'true'
      traefik.http.services.moonraker.loadbalancer.server.port: '7125'
    volumes:
      - './files/moonraker/moonraker.conf:/opt/cfg/moonraker.conf'
      - '/var/lib/docker-moonraker:/home/klippy/.moonraker_database'
      - '../klipper-config:/klipper-config'
      - '/var/lib/gcode_files:/gcode_files'
      - '/var/log/klippy.log:/var/log/klippy.log'
      - '/tmp:/tmp'
      - '/opt/vc:/opt/vc'
    networks:
      - 'traefik-net'
    command: >-
      --configfile=/opt/cfg/moonraker.conf
      --logfile=/var/log/moonraker.log
      --nologfile
    depends_on:
      - 'klipper'
    healthcheck:
      test: 'curl --fail --silent http://localhost:7125/printer/info'
    restart: 'unless-stopped'
  klipper:
    build:
      context: '../docker-klipper'
      dockerfile: 'Dockerfile'
    volumes:
      # - '../klipper-config:/klipper-config:ro'
      # - '../klipper-config/printer.cfg:/klipper-config/printer.cfg'
      - '../klipper-config:/klipper-config'
      - '../klipper-config/.config:/klipper/.config'
      - '/var/lib/gcode_files:/gcode_files'
      - '/var/log/klippy:/var/log/klippy'
      - '/tmp:/tmp'
    devices:
      - '/dev/serial/by-id/usb-Klipper_stm32f103xe_38FFD4055243363809620543-if00:/dev/serial/by-id/usb-Klipper_skr_mini_e3'
    environment:
      API_SOCKET: '/tmp/klippy_uds.sock'
      API_SOCKET_UID_GID: '1000:984'
      LOGFILE: '/var/log/klippy/klippy.log'
    healthcheck:
      test: >-
        test /dev/serial/by-id/usb-Klipper_skr_mini_e3 &&
        test "$$(env | grep API_SOCKET | cut -d = -f2-)"
      interval: '30s'
      timeout: '10s'
      retries: 2
      start_period: '40s'
    restart: 'unless-stopped'
networks:
  traefik-net:
