version: '3'
services:
  traefik:
    container_name: traefik
    image: docker.io/library/traefik:v2.5
    command:
      - '--api.dashboard=true' # enables the web UI
      - '--api.insecure=true' # enables the web UI
      - '--ping=true' # enables healthcheck route
      - '--providers.docker' # tell Traefik to listen to docker
      - '--providers.docker.exposedbydefault=false' # do not expose containers unless explicitly told so
      - '--providers.docker.network=docker-compose-octoprint_traefik-net' # set traefik's network
      - '--accesslog=true' # enable access logs
      - '--accessLog.filePath=/var/log/access.log' # set access log path
      # - '--accessLog.format='
      - '--providers.file.directory=/traefik/dynamic' # use dynamic config files
      - '--entryPoints.http.address=:80' # listen on 80
      - '--entryPoints.https.address=:443' # listen on 443
      - '--entryPoints.traefik.address=:8080' # listen on 8080
      # redirect http to https
      - '--entryPoints.http.http.redirections.entryPoint.to=https'
      - '--entryPoints.http.http.redirections.entryPoint.scheme=https'
      - '--serversTransport.insecureSkipVerify=true' # disable certificate verification for load balance endpoints
    # user: '${USER_ID}:${GROUP_ID}'
    ports:
      - '8008:80' # HTTP port
      - '8008:80/udp' # HTTP port
      - '4443:443' # HTTPS port
      - '4443:443/udp' # HTTPS port
      - '3000:8080' # dashboard
      - '3000:8080/udp' # dashboard
    networks:
      - traefik-net
    volumes:
      # TODO: don't pass in the socket. start here https://doc.traefik.io/traefik/providers/docker/#docker-api-access
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./files/ssl:/etc/ssl-certs:ro
      - ./files/traefik/dynamic:/traefik/dynamic
      - /var/log/traefik:/var/log
    logging:
      options:
        max-size: '100m'
        max-file: '3'
    healthcheck:
      test: 'traefik healthcheck --ping'
    restart: 'unless-stopped'

  fluidd:
    container_name: fluidd
    image: 'docker.io/cadriel/fluidd:latest'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.fluidd.rule: 'PathPrefix(`/`)'
      traefik.http.routers.fluidd.tls: 'true'
      traefik.http.services.fluidd.loadbalancer.server.port: '80'
    networks:
      - 'traefik-net'
    volumes:
      - '../klipper-config:/klipper-config'
      - '/var/log/klippy.log:/var/log/klippy.log'
      - '/dev:/dev'
      - '/tmp:/tmp'
    depends_on:
      - 'moonraker'
    healthcheck:
      test: 'curl --fail --silent http://localhost:80 || exit 1'
    restart: 'unless-stopped'
  mjpg-streamer:
    container_name: mjpg-streamer
    # image: 'ghcr.io/davralin/mjpg-streamer:latest'
    build:
      context: './files/mjpg-streamer'
      dockerfile: 'Containerfile'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.mjpg-streamer.rule: 'PathPrefix(`/webcam`)'
      traefik.http.routers.mjpg-streamer.tls: 'true'
      traefik.http.routers.mjpg-streamer.middlewares: 'mjpg-streamer@docker'
      traefik.http.services.mjpg-streamer.loadbalancer.server.port: '8080'
      traefik.http.middlewares.mjpg-streamer.replacepathregex.regex: '^/webcam/(.*)'
      traefik.http.middlewares.mjpg-streamer.replacepathregex.replacement: '/$$1'
    networks:
      - 'traefik-net'
    devices:
      - '/dev/video0'
    command: '"input_uvc.so --device /dev/video0 --fps 15 --resolution 1280x1024"'
    healthcheck:
      test: 'test /dev/video0 || exit 1'
    restart: 'unless-stopped'
  moonraker:
    container_name: moonraker
    # image: 'docker.io/mkuf/moonraker:nightly'
    build:
      context: './files/moonraker'
      dockerfile: 'Containerfile'
    labels:
      traefik.enable: 'true'
      traefik.http.routers.moonraker.rule: 'PathPrefix(`/websocket`,`/printer`,`/api`,`/access`,`/machine`,`/server`)'
      traefik.http.routers.moonraker.tls: 'true'
      traefik.http.services.moonraker.loadbalancer.server.port: '7125'
    user: '${USER_ID}:${GROUP_ID_GPIO}'
    volumes:
      - './files/moonraker/moonraker.conf:/opt/cfg/moonraker.conf'
      - '/var/lib/docker-moonraker:/home/klippy/.moonraker_database'
      - '../klipper-config:/klipper-config'
      - '/var/lib/gcode_files:/gcode_files'
      - '/var/lib/timelapse:/timelapse'
      - '/var/log/klippy.log:/var/log/klippy.log'
      - '/tmp:/tmp'
      - '/opt/vc:/opt/vc'
    devices:
      - '/dev/gpiochip0:/dev/gpiochip0'
    networks:
      - 'traefik-net'
    command: >-
      --configfile=/opt/cfg/moonraker.conf
      --logfile=/var/log/moonraker.log
      --nologfile
    depends_on:
      - 'klipper'
    restart: 'unless-stopped'
  klipper:
    container_name: klipper
    build:
      context: '../docker-klipper'
      dockerfile: 'Containerfile'
    labels:
      com.centurylinklabs.watchtower.monitor-only: 'true'
    volumes:
      - '../klipper-config:/klipper-config'
      - '../klipper-config/.config:/klipper/.config'
      - '../klipper-config/out:/klipper/out'
      - '/var/lib/gcode_files:/gcode_files'
      - '/var/log/klippy:/var/log/klippy'
      - '/tmp:/tmp'
      - '/dev:/dev'
    devices:
      # - '/dev/serial/by-id/usb-Klipper_stm32f103xe_38FFD4055243363809620543-if00:/dev/serial/by-id/usb-Klipper_skr_mini_e3'
      - '/dev/serial/by-id/usb-Klipper_stm32f103xe_38FFD4055243363809620543-if00:/dev/serial/by-id/usb-Klipper_stm32f103xe_38FFD4055243363809620543-if00'
    environment:
      API_SOCKET: '/tmp/klippy_uds.sock'
      API_SOCKET_UID_GID: '${USER_ID}:${GROUP_ID}'
      LOGFILE: '/var/log/klippy/klippy.log'
    depends_on:
      - 'klipper-mcu'
    healthcheck:
      test: >-
        test /dev/serial/by-id/usb-Klipper_skr_mini_e3 &&
        test "$$(env | grep API_SOCKET | cut -d = -f2-)"
      interval: '30s'
      timeout: '10s'
      retries: 2
      start_period: '40s'
    restart: 'unless-stopped'
  klipper-mcu:
    container_name: klipper-mcu
    build:
      context: '../docker-klipper'
      dockerfile: 'Containerfile.pi_mcu'
    labels:
      com.centurylinklabs.watchtower.monitor-only: 'true'
    volumes:
      - '/tmp:/tmp'
      - '/dev:/dev'
    # devices:
    #   - '/dev/gpiochip0:/dev/gpiochip0'
    healthcheck:
      test: 'test /tmp/klipper_host_mcu'
      interval: '30s'
      timeout: '10s'
      retries: 2
      start_period: '10s'
    restart: 'unless-stopped'

  watchtower:
    container_name: watchtower
    image: 'docker.io/containrrr/watchtower'
    # labels:
    #   com.centurylinklabs.watchtower.lifecycle.pre-update: 'exit 1'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '${HOME}/.docker/config.json:/config.json'
      - '/etc/timezone:/etc/timezone:ro'
    # TODO: figure out how to get watchtower to not kill a print in progress
    # command: --monitor-only
    environment:
      TZ: '${TIMEZONE}'
      WATCHTOWER_SCHEDULE: '0 0 18 * * *'
      WATCHTOWER_INCLUDE_RESTARTING: 'true'
      # WATCHTOWER_LIFECYCLE_HOOKS: 'true'

      WATCHTOWER_NOTIFICATIONS: 'email gotify'
      WATCHTOWER_NOTIFICATION_EMAIL_FROM: '${EMAIL_SMTP_SENDER_NAME}@${EMAIL_SMTP_SENDER_DOMAIN}'
      WATCHTOWER_NOTIFICATION_EMAIL_TO: '${EMAIL_SERVER_OWNER}'
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: '${EMAIL_SMTP_HOST}'
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: '${EMAIL_SMTP_PORT}'
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: '${EMAIL_SMTP_USERNAME}'
      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: '${EMAIL_SMTP_PASSWORD}'
      WATCHTOWER_NOTIFICATION_GOTIFY_URL: 'https://gotify.orleans.io/'
      WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN: '${WATCHTOWER_GOTIFY_TOKEN}'
    restart: 'unless-stopped'

  host-hostnames:
    container_name: host-hostnames
    # image: 'docker.io/dvdarias/docker-hoster'
    build:
      context: '../docker-hoster'
      dockerfile: 'Dockerfile'
    volumes:
      - '/var/run/docker.sock:/tmp/docker.sock'
      - '/etc/hosts:/tmp/hosts'
    restart: 'unless-stopped'
networks:
  traefik-net:
